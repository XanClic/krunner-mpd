#!/bin/ruby

require 'shellwords'


def die(msg)
    $stderr.puts(msg)
    exit 1
end


prefix = '/usr/local'
dbus_services_path = '/usr/share/dbus-1/services'
mpd_host = 'localhost'
mpd_port = 6600

skip_bundle_install = false

begin
    kservices_path = `kf5-config --install services`.strip
    if kservices_path.empty?
        kservices_path = nil
    else
        kservices_path = File.realpath(kservices_path)
    end
rescue
    kservices_path = nil
end


DEFAULTS = {
    prefix: prefix,
    kservices_path: kservices_path,
    dbus_services_path: dbus_services_path,
    mpd_host: mpd_host,
    mpd_port: mpd_port,
}

def defaults_to(name)
    if DEFAULTS[name]
        "Defaults to '#{DEFAULTS[name]}'."
    else
        "Has no default, so this option is mandatory."
    end
end


build_dir = Dir.pwd
source_dir = File.realpath(File.dirname(__FILE__))

ARGV.each do |arg|
    if arg.start_with?('--')
        arg = arg.split('=')
        if arg.length > 1
            arg = [arg[0]] + [arg[1..-1] * '=']
        end
    else
        arg = [arg]
    end

    case arg[0]
    when '--prefix'
        die("#{arg[0]} requires an argument") unless arg[1]
        prefix = arg[1]

    when '--kservices-path'
        die("#{arg[0]} requires an argument") unless arg[1]
        kservices_path = arg[1]

    when '--dbus-services-path'
        die("#{arg[0]} requires an argument") unless arg[1]
        dbus_services_path = arg[1]

    when '--mpd-host'
        die("#{arg[0]} requires an argument") unless arg[1]
        mpd_host = arg[1]

    when '--mpd-port'
        die("#{arg[0]} requires an argument") unless arg[1]
        mpd_port = Integer(arg[1])

    when '--skip-bundle-install'
        die("#{arg[0]} does not take an argument") if arg[1]
        skip_bundle_install = true

    when '--help'
        puts('Supported options:')
        puts('  --prefix=<prefix>')
        puts('      Defines the prefix to install to.  Note that the service description')
        puts('      files have to be installed to specific locations and are unaffected by')
        puts('      this.')
        puts("      #{defaults_to(:prefix)}")
        puts
        puts('  --kservices-path=<path>')
        puts('      Defines the path to install the .desktop file to.  This is usually the')
        puts('      kservices directory that can be queried using')
        puts("      'kf5-config --path services'.")
        puts("      #{defaults_to(:kservices_path)}")
        puts
        puts('  --dbus-services-path=<path>')
        puts('      Defines that path to install the DBus .service file to.')
        puts("      #{defaults_to(:dbus_services_path)}")
        puts
        puts('  --mpd-host=<host>')
        puts('      Defines the host the MPD server to be controlled runs on.')
        puts("      #{defaults_to(:mpd_host)}")
        puts
        puts('  --mpd-port=<port>')
        puts('      Defines the port the MPD server to be controlled runs on.')
        puts("      #{defaults_to(:mpd_port)}")
        puts
        puts('  --skip-bundle-install')
        puts("      Skips 'bundle install' during 'make'.  When specifying this option, it is")
        puts('      your responsibility to ensure that all the necessary gems are installed.')
        exit 0

    else
        die("Unknown parameter #{arg[0]}.  Try '--help' for more information.")
    end
end


if !kservices_path
    die('Failed to query kservices path, and --kservices-path was not given.')
end


locales = Dir.entries(source_dir + '/src/locales').select { |f|
        f.end_with?('.yml') && f.shellescape == f
    }.map { |f|
        f.sub(/\.yml$/, '')
    }


File.open(build_dir + '/Makefile', 'w') do |makefile|
    makefile.puts( <<EOF
PREFIX = #{prefix}
ASSETS_DIR = $(PREFIX)/share/krunner-mpd
BUILD_DIR = #{build_dir}
SOURCE_DIR = #{source_dir}
KSERVICES_DIR = #{kservices_path}
DBUS_SERVICES_DIR = #{dbus_services_path}
MPD_HOST = #{mpd_host}
MPD_PORT = #{mpd_port}

.PHONY: all clean install uninstall #{skip_bundle_install ? '# ' : ''}bundles

all: files #{skip_bundle_install ? '# ' : ''}bundles

files: \\
    $(BUILD_DIR)/krunner-mpd \\
    #{locales.map { |l| "$(BUILD_DIR)/locales/#{l}.yml" } * " \\\n    " } \\
    $(BUILD_DIR)/plasma-runner-mpd.desktop \\
    $(BUILD_DIR)/moe.xanclic.krunner-mpd.service

$(BUILD_DIR)/%: $(SOURCE_DIR)/src/%
	cp "$<" "$@"

$(BUILD_DIR)/locales/%: $(SOURCE_DIR)/src/locales/% $(BUILD_DIR)/locales
	cp "$<" "$@"

$(BUILD_DIR)/krunner-mpd: $(SOURCE_DIR)/src/krunner-mpd.rb
	"$(SOURCE_DIR)/replace-assets-path.rb" "$(ASSETS_DIR)" < "$<" > "$@"

$(BUILD_DIR)/moe.xanclic.krunner-mpd.service: $(SOURCE_DIR)/src/moe.xanclic.krunner-mpd.service.template
	cp "$<" "$@"
	echo "Exec=\\"$(PREFIX)/bin/krunner-mpd\\" \\"$(MPD_HOST)\\"" \\"$(MPD_PORT)\\" >> "$@"

$(BUILD_DIR)/locales:
	mkdir -p "$@"

#{skip_bundle_install ? '# ' : ''}bundles:
#{skip_bundle_install ? '# ' : ''}	cd "$(SOURCE_DIR)" && bundler install

clean:
	rm -f "$(BUILD_DIR)/krunner-mpd"
	rm -rf "$(BUILD_DIR)/locales"
	rm -f "$(BUILD_DIR)/plasma-runner-mpd.desktop"
	rm -f "$(BUILD_DIR)/moe.xanclic.krunner-mpd.service"

install: files
	install -d "$(DESTDIR)$(ASSETS_DIR)/locales"
	install -d "$(DESTDIR)$(PREFIX)/bin"
	install -d "$(DESTDIR)$(KSERVICES_DIR)"
	install -d "$(DESTDIR)$(DBUS_SERVICES_DIR)"
	install -m 0644 #{locales.map { |l| "\"$(BUILD_DIR)/locales/#{l}.yml\"" } * ' '} "$(DESTDIR)$(ASSETS_DIR)/locales/"
	install "$(BUILD_DIR)/krunner-mpd" "$(DESTDIR)$(PREFIX)/bin/"
	install -m 0644 "$(BUILD_DIR)/plasma-runner-mpd.desktop" "$(DESTDIR)$(KSERVICES_DIR)/"
	install -m 0644 "$(BUILD_DIR)/moe.xanclic.krunner-mpd.service" "$(DESTDIR)$(DBUS_SERVICES_DIR)/"

uninstall:
	rm -f "$(DESTDIR)$(PREFIX)/bin/krunner-mpd"
	rm -rf "$(DESTDIR)$(ASSETS_DIR)"
	rm -f "$(DESTDIR)$(KSERVICES_DIR)/plasma-runner-mpd.desktop"
	rm -f "$(DESTDIR)$(DBUS_SERVICES_DIR)/moe.xanclic.krunner-mpd.service"
EOF
    )
end

puts("Configure complete, run 'make' to build and '[sudo] make install' to install.")
